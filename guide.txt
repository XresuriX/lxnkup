python -m venv venv
python -m black {source_file_or_directory}
source venv/Scripts/activate
export DJANGO_SETTINGS_MODULE=src.settings.local
pytest -vv -s
python manage.py runserver --settings=src.settings.
python manage.py tailwind start --settings=src.settings.local
python manage.py makemigrations --settings=src.settings.test
python manage.py migrate --settings=src.settings.test
celery beat -l info
celery worker -l info
rabbitmqctl status
pip install -r requirements/local.txt
pre-commit install
git remote -v
git branch -M main  # Rename your current branch to 'main'
git remote add origin
git push -u origin main
git commit -m "Initial commit"
git add lxnkup/.envs/.production/.postgres
git commit --amend
git push --all --force
git push --tags --force
pip3 freeze > requirements.txt
pip install -r requirements/local.txt
export DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}"
export CELERY_BROKER_URL="${REDIS_URL}"
export CELERY_BROKER_URL=redis://localhost:6379/0

docker compose -f docker-compose.local.yml build
docker compose -f docker-compose.local.yml up -d
export COMPOSE_FILE=docker-compose.local.yml
docker compose up -d
docker compose -f docker-compose.docs.yml up
docker compose -f docker-compose.local.yml run --rm django python manage.py makemigrations
docker compose -f docker-compose.local.yml run --rm django python manage.py migrate
docker compose -f docker-compose.local.yml run --rm django coverage run -m pytest --create-db
docker compose -f docker-compose.local.yml run --rm django coverage report
docker compose -f docker-compose.local.yml -f docker-compose.docs.yml up
KURENTO_WS_URL = "ws://kurento:8888/kurento"

nginx:
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - ./nginx/default.config:/etc/nginx/default.conf:ro
      - next_build:/frontend/build:ro
    depends_on:
      - django
      - node

ruff check                  # Lint files in the current directory.
ruff check --fix            # Lint files in the current directory and fix any fixable errors.
ruff check --watch          # Lint files in the current directory and re-lint on change.


def suspended(sender, instance, created, **kwargs):
    action.send(instance, verb='was saved')

post_save.connect(my_handler, sender=MyModel)

"""
    likes = models.ManyToManyField(Profile, related_name="liked_post")
    dislikes = models.ManyToManyField(Profile, related_name="disliked_post")
"""



# Add to your Docker Compose
coturn:
  image: coturn/coturn
  ports:
    - "3478:3478/udp"
    - "3478:3478/tcp"
  environment:
    - TURN_USERNAME=your_username
    - TURN_PASSWORD=your_password
  networks:
    - app_network



likes = models.ManyToManyField(Profile, related_name="video_like", blank=True)
    dislikes = models.ManyToManyField(Profile, related_name="video_dislike", blank=True)
    def number_of_likes(self):
        return self.likes.count()

    def number_of_dislikes(self):
        return self.dislikes.count()




@api_controller(
    "/Bookmarks",
    tags=["bookmarks"],
    permissions=[permissions.IsAuthenticatedOrReadOnly],
)
class PostModelController(ModelControllerBase):
    @route.get("all/", response=list[])
    def get_s(self):
        return Bookmarks.objects.all()



from actstream import action  # type: ignore[PGH003]
from django.db.models.signals import post_save
from django.dispatch import receiver

#from notifications.signals import notify  # type: ignore[PGH003]  # noqa: ERA001
from lxnkup.posts.models import Post


@receiver(post_save, sender=Post)
def post_created(sender, instance, created, **kwargs):
    if created:
        # Send notification
        notify.send(
            instance.user,
            recipient=instance.profile.followers.all(),
            verb="created a new post",
            target=instance,
        )
        # Activity Stream
    action.send(instance.user, verb="created a post", action_object=instance)
